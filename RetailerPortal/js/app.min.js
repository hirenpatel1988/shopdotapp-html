/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		0: 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push([0,1]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0__);


(function () {
  var body = document.body;
  var header = document.querySelector('.header');
  var menu = document.querySelector('.menu');
  var menuWithChild = document.querySelectorAll('.menu_item.with-child');
  var menuButton = document.querySelector('.menu-button');
  var vh = window.innerHeight * 0.01;
  var lastScroll = 0;
  var scrollPos = window.scrollY;
  var isTouchDevice = ('ontouchstart' in document.documentElement);
  document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
  window.addEventListener('resize', function () {
    var vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
  });

  var canUseWebp = function canUseWebp() {
    var elem = document.createElement('canvas');

    if (!!(elem.getContext && elem.getContext('2d'))) {
      return elem.toDataURL('image/webp').indexOf('data:image/webp') == 0;
    }

    return false;
  };

  var images = document.querySelectorAll('[data-bg]');
  images.forEach(function (image) {
    var img = image.getAttribute('data-bg');
    image.style.backgroundImage = 'url(' + img + ')';
  });
  var isitFirefox = window.navigator.userAgent.match(/Firefox\/([0-9]+)\./);
  var firefoxVer = isitFirefox ? parseInt(isitFirefox[1]) : 0;

  if (canUseWebp() || firefoxVer >= 65) {
    var imagesWebp = document.querySelectorAll('[data-bg-webp]');
    imagesWebp.forEach(function (imageWebp) {
      var imgWebp = imageWebp.getAttribute('data-bg-webp');
      imageWebp.style.backgroundImage = 'url(' + imgWebp + ')';
    });
  }

  var submenu = document.querySelector('.header_submenu');
  var submenuItems = document.querySelectorAll('.submenu_item.with-child');

  if (submenuItems) {
    submenuItems.forEach(function (submenuItem) {
      submenuItem.querySelector('.submenu_link').addEventListener('click', function (e) {
        e.preventDefault();

        if (submenuItem.classList.contains('active')) {
          submenuItem.classList.remove('active');
          document.querySelector('.header_submenu-content').classList.remove('open');
          document.querySelector("#".concat(submenuItem.dataset.target)).classList.remove('active');
          return;
        }

        submenuItems.forEach(function (submenuItem) {
          return submenuItem.classList.remove('active');
        });

        if (document.querySelector("#".concat(submenuItem.dataset.target))) {
          submenuItem.classList.add('active');
          document.querySelector('.header_submenu-content').classList.add('open');
          document.querySelector("#".concat(submenuItem.dataset.target)).classList.add('active');
        }
      });
    });
  }

  var sForms = document.querySelectorAll('.search_form');
  sForms.forEach(function (sForm) {
    sForm.addEventListener('keyup', function (e) {
      if (e.target.value) {
        sForm.classList.add('clear-visible');
        return;
      }

      sForm.classList.remove('clear-visible');
    });
    sForm.querySelector('.search_form-button').addEventListener('click', function (e) {
      e.preventDefault();
      sForm.classList.remove('clear-visible');
      sForm.reset();
    });
    sForm.addEventListener('keydown', function (e) {
      if (e.keyCode === 13) {
        sForm.submit();
      }
    });
  });

  if (submenu) {
    var submenuScrollPrev = header.querySelector('.header_submenu-scroll-button-prev');
    var submenuScrollNext = header.querySelector('.header_submenu-scroll-button-next');
    var submenuWidth = submenu.offsetWidth;
    var submenuScrollWidth = submenu.scrollWidth;

    if (submenuWidth < submenuScrollWidth) {
      submenuScrollNext.classList.add('visible');
    }

    window.addEventListener('resize', function () {
      submenuWidth = submenu.offsetWidth;
      submenuScrollWidth = submenu.scrollWidth;

      if (submenuWidth < submenuScrollWidth) {
        submenuScrollNext.classList.add('visible');
        return;
      }

      submenuScrollNext.classList.remove('visible');
    });
    $('.header_submenu-scroll-button-next').on('mousedown', function () {
      (function smoothSrcroll() {
        $('.header_submenu').stop().animate({
          scrollLeft: Math.max($('.header_submenu').scrollLeft()) + 100
        }, 1000, 'linear', function () {
          window.timeout = setTimeout(smoothSrcroll(), 0);
        });
      })();
    }).on('mouseup', function () {
      $('.header_submenu').stop();

      if ($('.header_submenu')[0].scrollLeft > 0) {
        submenuScrollPrev.classList.add('visible');
      }

      if ($('.header_submenu')[0].scrollLeft === Math.max($('.header_submenu').scrollLeft())) {
        submenuScrollNext.classList.remove('visible');
      }

      clearTimeout(window.timeout);
    });
    $('.header_submenu-scroll-button-prev').on('mousedown', function () {
      (function smoothSrcroll() {
        $('.header_submenu').stop().animate({
          scrollLeft: Math.max($('.header_submenu').scrollLeft()) - 100
        }, 1000, 'linear', function () {
          window.timeout = setTimeout(smoothSrcroll(), 0);
        });
      })();
    }).on('mouseup', function () {
      if ($('.header_submenu')[0].scrollLeft === 0) {
        submenuScrollPrev.classList.remove('visible');
        submenuScrollNext.classList.add('visible');
      }

      if ($('.header_submenu')[0].scrollLeft > 0) {
        submenuScrollNext.classList.add('visible');
      }

      $('.header_submenu').stop();
      clearTimeout(window.timeout);
    });
  }

  var filters = document.querySelectorAll('.filter');

  if (filters) {
    filters.forEach(function (filter) {
      if (filter.classList.contains('open')) {
        filter.querySelector('.filter_body').style.height = filter.querySelector('.filter_body').scrollHeight + 'px';
      }

      if (filter.querySelector('.filter_head')) {
        filter.querySelector('.filter_head').addEventListener('click', function () {
          if (filter.classList.contains('open')) {
            filter.classList.remove('open');
            filter.querySelector('.filter_body').style.height = 0;
            return;
          }

          filter.classList.add('open');
          filter.querySelector('.filter_body').style.height = filter.querySelector('.filter_body').scrollHeight + 'px';
        });
      }
    });
    var filterSHowHide = document.querySelector('.filters_hide-and-show');

    if (filterSHowHide) {
      filterSHowHide.addEventListener('click', function () {
        document.querySelector('.filters').classList.toggle('hidden');
        body.classList.toggle('sidebar-hidden');
      });
    }
  }

  var tabsAll = document.querySelectorAll('.tabs');

  if (tabsAll) {
    tabsAll.forEach(function (tabs) {
      var tabLinks = tabs.querySelectorAll('.tab-link');
      var tabItems = tabs.querySelectorAll('.tab');
      tabLinks.forEach(function (tabLink) {
        tabLink.addEventListener('click', function (e) {
          e.preventDefault();
          tabLinks.forEach(function (tabLink) {
            return tabLink.classList.remove('active');
          });
          tabLink.classList.add('active');
          tabItems.forEach(function (tabItem) {
            tabItem.classList.remove('active');

            if (tabItem.dataset.target === tabLink.dataset.link) {
              tabItem.classList.add('active');
              return;
            }
          });
        });
      });
    });
  }

  var pcs = document.querySelectorAll('.pc');

  if (pcs) {
    pcs.forEach(function (pc) {
//      pc.querySelector('.pc-info').addEventListener('click', function (e) {
//        e.preventDefault();
//        pc.classList.add('open');
//      });
//      pc.querySelector('.pc_extra-close').addEventListener('click', function (e) {
//        e.preventDefault();
//        pc.classList.remove('open');
////reset tab when close button click
//        var tabs = pc.querySelectorAll('.tab');
//        tabs[1].classList.remove('active');
//        tabs[0].classList.add('active');
//        var tablinks = pc.querySelectorAll('.tab-link');
//        tablinks[1].classList.remove('active');
//        tablinks[0].classList.add('active');
////reset tab when close button click
//        
//      });
      var pcSwiper = new swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0___default.a(pc.querySelector('.swiper-container'), {
        speed: 1000,
        navigation: {
          nextEl: pc.querySelector('.swiper-button-next'),
          prevEl: pc.querySelector('.swiper-button-prev')
        },
        pagination: {
          el: pc.querySelector('.swiper-pagination'),
          clickable: true
        }
      });
      pc.querySelector('.pc_links-gallery').addEventListener('click', function (e) {
        e.preventDefault();
        // Product list Popup gallery modal code
          var productCardPopupGallerys = document.querySelectorAll('.popup-product-gallery');

          if (productCardPopupGallerys) {
            productCardPopupGallerys.forEach(function (productCardPopupGallery) {
              var pcSwiper = new swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0___default.a(productCardPopupGallery.querySelector('.swiper-container'), {
                slidesPerView: 'auto',
                speed: 1000,
                navigation: {
                  nextEl: productCardPopupGallery.querySelector('.swiper-button-next'),
                  prevEl: productCardPopupGallery.querySelector('.swiper-button-prev')
                }
              });
            });
          }
          // Product list Popup gallery modal code
        document.querySelector("#".concat(pc.querySelector('.pc_links-gallery').dataset.target)).classList.add('active');
      });
    });
  }
    
//Single Product modal
    
    var pcs = document.querySelectorAll('.product_slider');

  if (pcs) {
    pcs.forEach(function (pc) {
      pc.querySelector('.pc_links-gallery').addEventListener('click', function (e) {
        e.preventDefault();
        // Single Popup gallery modal code
          var productCardPopupGallerys = document.querySelectorAll('.popup-product-gallery');

          if (productCardPopupGallerys) {
            productCardPopupGallerys.forEach(function (productCardPopupGallery) {
              var pcSwiper = new swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0___default.a(productCardPopupGallery.querySelector('.swiper-container'), {
                slidesPerView: 'auto',
                speed: 1000,
                navigation: {
                  nextEl: productCardPopupGallery.querySelector('.swiper-button-next'),
                  prevEl: productCardPopupGallery.querySelector('.swiper-button-prev')
                }
              });
            });
          }
          // Single Popup gallery modal code end
        document.querySelector("#".concat(pc.querySelector('.pc_links-gallery').dataset.target)).classList.add('active');
      });
    });
  }
    
//Single Product modal end

  var productCardPopupGallerys = document.querySelectorAll('.popup-product-gallery');

  if (productCardPopupGallerys) {
    productCardPopupGallerys.forEach(function (productCardPopupGallery) {
      var pcSwiper = new swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0___default.a(productCardPopupGallery.querySelector('.swiper-container'), {
        slidesPerView: 'auto',
        speed: 1000,
        navigation: {
          nextEl: productCardPopupGallery.querySelector('.swiper-button-next'),
          prevEl: productCardPopupGallery.querySelector('.swiper-button-prev')
        }
      });
    });
  }

  var inviteBrands = document.querySelectorAll('.invite-brand');

  if (inviteBrands) {
    inviteBrands.forEach(function (inviteBrand) {
      inviteBrand.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector('.popup-invite').classList.add('active');
      });
    });
  }

  var messageBrands = document.querySelectorAll('.message-brand');

  if (messageBrands) {
    messageBrands.forEach(function (messageBrand) {
      messageBrand.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector('.popup-message').classList.add('active');
      });
    });
  }
    
  var videobrand = document.querySelectorAll('.videobrand');

  if (videobrand) {
    videobrand.forEach(function (videobrand) {
      videobrand.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector('.videobrand-message').classList.add('active');
      });
    });
  }

  var popups = document.querySelectorAll('.popup');

  if (popups) {
    popups.forEach(function (popup) {
      var closes = popup.querySelectorAll('.popup-close');
      closes.forEach(function (close) {
        close.addEventListener('click', function (e) {
          e.preventDefault();
          popup.classList.remove('active');
        });
      });
    });
  }
    
//  var closealert = document.querySelectorAll('.alert_close');
//
//  if (closealert) {
//    closealert.forEach(function (alert_close) {
//      var closes = alert_close.querySelectorAll('.popup-close');
//      closes.forEach(function (close) {
//        close.addEventListener('click', function (e) {
//          e.preventDefault();
//          alert_close.classList.add('hide');
//        });
//      });
//    });
//  }

  var productSlider = document.querySelector('.product_slider');

  if (productSlider) {
    var galleryThumbs = new swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0___default.a(productSlider.querySelector('.gallery-thumbs'), {
      centeredSlides: true,
      centeredSlidesBounds: true,
      slidesPerView: 'auto',
      watchOverflow: true,
      watchSlidesVisibility: true,
      watchSlidesProgress: true,
      direction: 'vertical',
      spaceBetween: 8
    });
    var galleryMain = new swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0___default.a(productSlider.querySelector('.gallery-main'), {
      watchOverflow: true,
      watchSlidesVisibility: true,
      watchSlidesProgress: true,
      preventInteractionOnTransition: true,
      navigation: {
        nextEl: productSlider.querySelector('.swiper-button-next'),
        prevEl: productSlider.querySelector('.swiper-button-prev')
      },
      thumbs: {
        swiper: galleryThumbs
      }
    });
    galleryMain.on('slideChangeTransitionStart', function () {
      galleryThumbs.slideTo(galleryMain.activeIndex);
    });
    galleryThumbs.on('transitionStart', function () {
      galleryMain.slideTo(galleryThumbs.activeIndex);
    });
  }

  var pSnack = document.querySelector('.product-snack');

  if (pSnack) {
    pSnack.querySelector('.product-snack-close').addEventListener('click', function (e) {
      pSnack.classList.remove('active');
    });
  }

  var videos = document.querySelectorAll('.video_wrap');

  if (videos) {
    var vimeoCount = 0;
    var youtubeCount = 0;
    videos.forEach(function (video) {
      var videoType = video.querySelector('.video').dataset.video;
      video.querySelector('.video-button').addEventListener('click', function (e) {
        video.classList.add('playing');
      });

      if (videoType === 'vimeo') {
        vimeoCount += 1;

        if (vimeoCount === 1) {
          var tag = document.createElement('script');
          tag.src = 'https://player.vimeo.com/api/player.js';
          var firstScriptTag = document.getElementsByTagName('script')[0];
          firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        }

        var videoTarget = video.querySelector('.video-source').dataset.video;
        var options = {
          id: videoTarget,
          loop: true
        };
        video.querySelector('.video-button').addEventListener('click', function (e) {
          var player = new Vimeo.Player(video.querySelector('.video-source'), options);
          setTimeout(function () {
            player.play();
          }, 200);
        });
      }

      if (videoType === 'youtube') {
        var loadPlayer = function loadPlayer() {
          if (typeof YT == 'undefined' || typeof YT.Player == 'undefined') {
            if (youtubeCount === 1) {
              var tag = document.createElement('script');
              tag.src = 'https://www.youtube.com/iframe_api';
              var firstScriptTag = document.getElementsByTagName('script')[0];
              firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
            }

            window.onYouTubePlayerAPIReady = function () {
              onYouTubePlayer();
            };
          }
        };

        var onYouTubePlayer = function onYouTubePlayer() {
          player = new YT.Player(video.querySelector('.video-source'), {
            videoId: "".concat(_videoTarget)
          });
        };

        var onPlayerReady = function onPlayerReady(event) {
          event.target.playVideo();
        };

        youtubeCount += 1;
        var _videoTarget = video.querySelector('.video-source').dataset.video;
        var player;
        loadPlayer();
        video.querySelector('.video-button').addEventListener('click', function (e) {
          player.playVideo();
        });
      } // video.querySelector('.video-button').addEventListener('click', function () {
      //   video.classList.add('playing');
      //   video.querySelector('video').play();
      //   video.querySelector('video').controls = true;
      // });

    });
  }
})();

/***/ })
/******/ ]);


//Read More code
      function showMore() {
        var maxLength = 310;
        $(".show-read-more").each(function(){
            var myStr = $(this).text();
            if($.trim(myStr).length > maxLength){
                var newStr = myStr.substring(0, maxLength);
                var removedStr = myStr.substring(maxLength, $.trim(myStr).length);
                $(this).empty().html(newStr);
                $(this).append(' <a href="javascript:void(0);" class="read-more">View more</a>');
                $(this).append('<span class="more-text">' + removedStr + '</span>');
            }
        });
      }
      $(document).ready(function(){
        $(".radio-click").on("click", function(){
            $(".pe_radio").removeClass("active");
            $(this).parents(".pe_radio").addClass("active");
        });
        showMore();
        $(document).on("click", ".read-more", function(){
            $(this).siblings(".more-text").contents().unwrap();
            $(this).remove();
        });
        $(".pc_extra-close").click(function() {
          showMore();
        })
          
      $('.pse_item').click(function(e) {
        $('.pse_item.active').removeClass('active');
        var $parent = $(this);
        $parent.addClass('active');
        e.preventDefault();
      });
          
        $('.pse_brand').click(function() {
            $('.integrate-area').show();
        });

        $('.pse_retailer').click(function() {
            $('.integrate-area').hide();
            $('.integrate-area-input').hide();
        });
          
        $('.other-integrate').click(function() {
            $('.integrate-area-input').show();
            $('.form-input-two').show();
            $('.integrate-area').hide();
            $('.form-input-one').hide();
        });
    });



  var tabsAll = document.querySelectorAll('.tabs');

  if (tabsAll) {
    tabsAll.forEach(function (tabs) {
      var tabLinks = tabs.querySelectorAll('.tab-links');
      var tabItems = tabs.querySelectorAll('.tab');
      tabLinks.forEach(function (tabLink) {
        tabLink.addEventListener('click', function (e) {
          e.preventDefault();
          tabLinks.forEach(function (tabLink) {
            return tabLink.classList.remove('active');
          });
          tabLink.classList.add('active');
          tabItems.forEach(function (tabItem) {
            tabItem.classList.remove('active');

            if (tabItem.dataset.target === tabLink.dataset.link) {
              tabItem.classList.add('active');
              return;
            }
          });
        });
      });
    });
  }

  var UploadLogo = document.querySelectorAll('.upload-logo');

  if (UploadLogo) {
    UploadLogo.forEach(function (inviteBrand) {
      inviteBrand.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector('.upload-logo-modal').classList.add('active');
      });
    });
  }

  var DeleteUser = document.querySelectorAll('.publish-modal-action');

  if (DeleteUser) {
    DeleteUser.forEach(function (inviteBrand) {
      inviteBrand.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector('.publish-modal').classList.add('active');
      });
    });
  }

  var DeleteUser = document.querySelectorAll('.delete-action');

  if (DeleteUser) {
    DeleteUser.forEach(function (inviteBrand) {
      inviteBrand.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector('.delete-user-modal').classList.add('active');
      });
    });
  }

  var UserAdded = document.querySelectorAll('.user-added');

  if (UserAdded) {
    UserAdded.forEach(function (inviteBrand) {
      inviteBrand.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector('.user-added-modal').classList.add('active');
      });
    });
  }

  var DeleteUser = document.querySelectorAll('.confirmation-window-modal-action');

  if (DeleteUser) {
    DeleteUser.forEach(function (inviteBrand) {
      inviteBrand.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector('.confirmation-window').classList.add('active');
      });
    });
  }